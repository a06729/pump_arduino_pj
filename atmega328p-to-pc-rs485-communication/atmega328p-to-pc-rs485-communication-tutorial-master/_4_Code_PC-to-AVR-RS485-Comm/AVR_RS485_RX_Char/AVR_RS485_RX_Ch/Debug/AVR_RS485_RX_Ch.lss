
AVR_RS485_RX_Ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000688  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000605  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000014a  00000000  00000000  00000e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ca  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main()
{
	
	unsigned int ubrr = BAUD_RATE_9600_BPS; 
	
	PORTC = 0x00; //All LED's OFF
  80:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
  82:	1b b8       	out	0x0b, r1	; 11
	
	// RS485 Control Lines
	// PD2 -> ~RE (Active Low signal)
	// PD3 ->  DE
	
	DDRD  |= (1<<PD2) | (1<<PD3); // PD2,PD3 both Outputs
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	8c 60       	ori	r24, 0x0C	; 12
  88:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PD3);            // PD3->  DE = Low; 
  8a:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1<<PD2);            // PD2-> ~RE = Low; 
  8c:	5a 98       	cbi	0x0b, 2	; 11
	                               //RS485 chip MAX485 Receive mode
	
	/* Set Baudrate  */
	UBRR0H = (ubrr>>8);
  8e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (ubrr);
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/*Enable receiver  */
	UCSR0B = (1<<RXEN0);
  98:	80 e1       	ldi	r24, 0x10	; 16
  9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = 0x06;
  9e:	86 e0       	ldi	r24, 0x06	; 6
  a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	while(1)
	{
		while ( !(UCSR0A & (1<<RXC0)) ); /* Wait for data to be received */
  a4:	e0 ec       	ldi	r30, 0xC0	; 192
  a6:	f0 e0       	ldi	r31, 0x00	; 0
	
		switch(UDR0)
  a8:	a6 ec       	ldi	r26, 0xC6	; 198
  aa:	b0 e0       	ldi	r27, 0x00	; 0
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = 0x06;
	
	while(1)
	{
		while ( !(UCSR0A & (1<<RXC0)) ); /* Wait for data to be received */
  ac:	80 81       	ld	r24, Z
  ae:	88 23       	and	r24, r24
  b0:	ec f7       	brge	.-6      	; 0xac <main+0x2c>
	
		switch(UDR0)
  b2:	8c 91       	ld	r24, X
  b4:	82 34       	cpi	r24, 0x42	; 66
  b6:	39 f0       	breq	.+14     	; 0xc6 <main+0x46>
  b8:	83 34       	cpi	r24, 0x43	; 67
  ba:	41 f0       	breq	.+16     	; 0xcc <main+0x4c>
  bc:	81 34       	cpi	r24, 0x41	; 65
  be:	b1 f7       	brne	.-20     	; 0xac <main+0x2c>
		{
			case 'A' : 	DDRB  |= (1<<PB2); // Set Direction as output
  c0:	22 9a       	sbi	0x04, 2	; 4
						PORTB |= (1<<PB2); // Set PB2 Line High,LED1 high
  c2:	2a 9a       	sbi	0x05, 2	; 5
						break;
  c4:	f3 cf       	rjmp	.-26     	; 0xac <main+0x2c>
				
            case 'B' : 	DDRB  |= (1<<PB3);// Set Direction as output 
  c6:	23 9a       	sbi	0x04, 3	; 4
						PORTB |= (1<<PB3);// Set PB3 Line High,LED2 High
  c8:	2b 9a       	sbi	0x05, 3	; 5
						break;		
  ca:	f0 cf       	rjmp	.-32     	; 0xac <main+0x2c>
							
			case 'C' : 	DDRB  |= (1<<PB3);// Set Direction as output 
  cc:	23 9a       	sbi	0x04, 3	; 4
						DDRB  |= (1<<PB2);// Set Direction as output 
  ce:	22 9a       	sbi	0x04, 2	; 4
			            PORTB &= ~(1<<PB3); // Set PB3 Line Low
  d0:	2b 98       	cbi	0x05, 3	; 5
						PORTB &= ~(1<<PB2); // Set PB2 Line Low
  d2:	2a 98       	cbi	0x05, 2	; 5
						break;			
  d4:	eb cf       	rjmp	.-42     	; 0xac <main+0x2c>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
