
RS485_TX_String.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000128  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000740  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000197  00000000  00000000  0000101e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000423  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007f  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define BAUD_RATE_115200_BPS  5 // 115.2k bps
#define BAUD_RATE_230400_BPS  2 // 230.4k bps


int main()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2c 97       	sbiw	r28, 0x0c	; 12
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	
	int i = 0;
	unsigned int ubrr = BAUD_RATE_9600_BPS;  //Set Baudrate
	
	unsigned char data[] = "Hello World"; //String to be transmitted
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	
	// RS485 Control Lines
	// PD2 -> ~RE (Active Low signal)
	// PD3 ->  DE
	
	DDRD  |= (1<<PD2) | (1<<PD3); // PD2,PD3 both Outputs
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	8c 60       	ori	r24, 0x0C	; 12
  c0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD3);            // PD3->  DE = High; 
  c2:	5b 9a       	sbi	0x0b, 3	; 11
	                              // MAX485 Transmit mode
	PORTD |= (1<<PD2);            // PD2-> ~RE = High;
  c4:	5a 9a       	sbi	0x0b, 2	; 11
	
	
	
	/* Set Baudrate @ 9600bps */
	UBRR0H = (ubrr>>8);
  c6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (ubrr);
  ca:	87 e6       	ldi	r24, 0x67	; 103
  cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<TXEN0);
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = 0x06;
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	while(1) /* Loop the message continuously */
	{
		i = 0;
		while(data[i] != 0) /* print the String  "Hello from ATmega328p" */
		{
			while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer       */
  dc:	e0 ec       	ldi	r30, 0xC0	; 192
  de:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0 = data[i];					 /* Put data into buffer, sends the data */
  e0:	26 ec       	ldi	r18, 0xC6	; 198
  e2:	30 e0       	ldi	r19, 0x00	; 0
		
		/* Send new line Character */
		/* On the PC side we are using ReadLine() function to Read,
		/* which exits on receiving new line \n Character*/
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer       */
		UDR0 = '\n';					 /* Put data into buffer, sends the data */
  e4:	4a e0       	ldi	r20, 0x0A	; 10
	
	
	while(1) /* Loop the message continuously */
	{
		i = 0;
		while(data[i] != 0) /* print the String  "Hello from ATmega328p" */
  e6:	99 81       	ldd	r25, Y+1	; 0x01
  e8:	99 23       	and	r25, r25
  ea:	69 f0       	breq	.+26     	; 0x106 <main+0x70>
  ec:	be 01       	movw	r22, r28
  ee:	6e 5f       	subi	r22, 0xFE	; 254
  f0:	7f 4f       	sbci	r23, 0xFF	; 255
		{
			while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer       */
  f2:	80 81       	ld	r24, Z
  f4:	85 ff       	sbrs	r24, 5
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <main+0x5c>
			UDR0 = data[i];					 /* Put data into buffer, sends the data */
  f8:	d9 01       	movw	r26, r18
  fa:	9c 93       	st	X, r25
	
	
	while(1) /* Loop the message continuously */
	{
		i = 0;
		while(data[i] != 0) /* print the String  "Hello from ATmega328p" */
  fc:	db 01       	movw	r26, r22
  fe:	9d 91       	ld	r25, X+
 100:	bd 01       	movw	r22, r26
 102:	91 11       	cpse	r25, r1
 104:	f6 cf       	rjmp	.-20     	; 0xf2 <main+0x5c>
		}
		
		/* Send new line Character */
		/* On the PC side we are using ReadLine() function to Read,
		/* which exits on receiving new line \n Character*/
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer       */
 106:	80 81       	ld	r24, Z
 108:	85 ff       	sbrs	r24, 5
 10a:	fd cf       	rjmp	.-6      	; 0x106 <main+0x70>
		UDR0 = '\n';					 /* Put data into buffer, sends the data */
 10c:	d9 01       	movw	r26, r18
 10e:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	bf ef       	ldi	r27, 0xFF	; 255
 112:	5f eb       	ldi	r21, 0xBF	; 191
 114:	81 e2       	ldi	r24, 0x21	; 33
 116:	b1 50       	subi	r27, 0x01	; 1
 118:	50 40       	sbci	r21, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x80>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x8a>
 120:	00 00       	nop
 122:	e1 cf       	rjmp	.-62     	; 0xe6 <main+0x50>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
