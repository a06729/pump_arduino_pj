
RS485_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000124  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000741  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a8  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002af  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007f  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

#include <util/delay.h>


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	68 97       	sbiw	r28, 0x18	; 24
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    // +-----------------------------------------------------------------------+ //
	
	int i = 0;
	unsigned int ubrr = BAUD_RATE_230400_BPS;
	
	unsigned char data[] = "Hello from ATmega328p  ";
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	
	/* Set Baudrate  */
	UBRR0H = (ubrr>>8); // Shift the 16bit value ubrr 8 times to the right and transfer the upper 8 bits to UBBR0H register.
  bc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (ubrr);    // Copy the 16 bit value ubrr to the 8 bit UBBR0L register,Upper 8 bits are truncated while lower 8 bits are copied
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	

	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<TXEN0); /* Enable  transmitter                 */
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	while(1) /* Loop the messsage continously */
	{
		i = 0;
		while(data[i] != 0) /* print the String  "Hello from ATmega328p" */
		{
			while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer       */
  d2:	e0 ec       	ldi	r30, 0xC0	; 192
  d4:	f0 e0       	ldi	r31, 0x00	; 0
			/* So NOT{[UCSR0A & (1<<UDRE0)] = 0} = 1 ,While(1) loop stays there */
			
			/* When UDRE0 = 1,data transmisson completed.                       */
			/* So NOT{[UCSR0A & (1<<UDRE0)] = 1} = 0 ,While(0) loop fails       */
			
			UDR0 = data[i];					 /* Put data into buffer, sends the data */
  d6:	26 ec       	ldi	r18, 0xC6	; 198
  d8:	30 e0       	ldi	r19, 0x00	; 0
		
		/* Sending '\n'  '\r' Character pair helps to format the output properly on console putty Screen */
		/*************************************************************************************************/
		/* Send "\n" Character */
		while (!( UCSR0A & (1<<UDRE0)));   /* Wait for empty transmit buffer       */
		UDR0 = '\n';					    /* Put data into buffer, sends the data */
  da:	5a e0       	ldi	r21, 0x0A	; 10
		
		/* Send "\r" Character */
		while (!( UCSR0A & (1<<UDRE0)));   /* Wait for empty transmit buffer       */
		UDR0 = '\r';					    /* Put data into buffer, sends the data */
  dc:	4d e0       	ldi	r20, 0x0D	; 13
	UCSR0B = (1<<TXEN0); /* Enable  transmitter                 */
	
	while(1) /* Loop the messsage continously */
	{
		i = 0;
		while(data[i] != 0) /* print the String  "Hello from ATmega328p" */
  de:	99 81       	ldd	r25, Y+1	; 0x01
  e0:	99 23       	and	r25, r25
  e2:	69 f0       	breq	.+26     	; 0xfe <main+0x68>
  e4:	be 01       	movw	r22, r28
  e6:	6e 5f       	subi	r22, 0xFE	; 254
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
		{
			while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer       */
  ea:	80 81       	ld	r24, Z
  ec:	85 ff       	sbrs	r24, 5
  ee:	fd cf       	rjmp	.-6      	; 0xea <main+0x54>
			/* So NOT{[UCSR0A & (1<<UDRE0)] = 0} = 1 ,While(1) loop stays there */
			
			/* When UDRE0 = 1,data transmisson completed.                       */
			/* So NOT{[UCSR0A & (1<<UDRE0)] = 1} = 0 ,While(0) loop fails       */
			
			UDR0 = data[i];					 /* Put data into buffer, sends the data */
  f0:	d9 01       	movw	r26, r18
  f2:	9c 93       	st	X, r25
	UCSR0B = (1<<TXEN0); /* Enable  transmitter                 */
	
	while(1) /* Loop the messsage continously */
	{
		i = 0;
		while(data[i] != 0) /* print the String  "Hello from ATmega328p" */
  f4:	db 01       	movw	r26, r22
  f6:	9d 91       	ld	r25, X+
  f8:	bd 01       	movw	r22, r26
  fa:	91 11       	cpse	r25, r1
  fc:	f6 cf       	rjmp	.-20     	; 0xea <main+0x54>
		
		
		/* Sending '\n'  '\r' Character pair helps to format the output properly on console putty Screen */
		/*************************************************************************************************/
		/* Send "\n" Character */
		while (!( UCSR0A & (1<<UDRE0)));   /* Wait for empty transmit buffer       */
  fe:	80 81       	ld	r24, Z
 100:	85 ff       	sbrs	r24, 5
 102:	fd cf       	rjmp	.-6      	; 0xfe <main+0x68>
		UDR0 = '\n';					    /* Put data into buffer, sends the data */
 104:	d9 01       	movw	r26, r18
 106:	5c 93       	st	X, r21
		
		/* Send "\r" Character */
		while (!( UCSR0A & (1<<UDRE0)));   /* Wait for empty transmit buffer       */
 108:	80 81       	ld	r24, Z
 10a:	85 ff       	sbrs	r24, 5
 10c:	fd cf       	rjmp	.-6      	; 0x108 <main+0x72>
		UDR0 = '\r';					    /* Put data into buffer, sends the data */
 10e:	d9 01       	movw	r26, r18
 110:	4c 93       	st	X, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	87 ea       	ldi	r24, 0xA7	; 167
 114:	91 e6       	ldi	r25, 0x61	; 97
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x80>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x86>
 11c:	00 00       	nop
 11e:	df cf       	rjmp	.-66     	; 0xde <main+0x48>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
