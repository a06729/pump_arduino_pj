
pump_pj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800100  00800100  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf6  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f3  00000000  00000000  00001102  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063f  00000000  00000000  000019f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b0  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b5  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002b69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_18>
  4c:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 38       	cpi	r26, 0x8D	; 141
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b9 01 	jmp	0x372	; 0x372 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "uart.h"
#include "timer.h"

int main(void)
{
	uart_init(9600);
  90:	60 e8       	ldi	r22, 0x80	; 128
  92:	75 e2       	ldi	r23, 0x25	; 37
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 36 01 	call	0x26c	; 0x26c <uart_init>
	timer0_init();
  9c:	0e 94 b5 00 	call	0x16a	; 0x16a <timer0_init>
	sei();
  a0:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		//uart_print("Received and echoed!\n");
        if(uart_is_available()) {
  a2:	0e 94 8e 01 	call	0x31c	; 0x31c <uart_is_available>
  a6:	88 23       	and	r24, r24
  a8:	e1 f3       	breq	.-8      	; 0xa2 <main+0x12>
            // 데이터를 한 바이트 읽어옵니다.
            uint8_t received_data = uart_rx();
  aa:	0e 94 70 01 	call	0x2e0	; 0x2e0 <uart_rx>

            // 받은 데이터를 그대로 다시 전송합니다.
            uart_tx(received_data);
  ae:	0e 94 4f 01 	call	0x29e	; 0x29e <uart_tx>
  b2:	f7 cf       	rjmp	.-18     	; 0xa2 <main+0x12>

000000b4 <__vector_16>:
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	4f 93       	push	r20
  c8:	5f 93       	push	r21
  ca:	6f 93       	push	r22
  cc:	7f 93       	push	r23
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	af 93       	push	r26
  d4:	bf 93       	push	r27
  d6:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <timer0_millis>
  da:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <timer0_millis+0x1>
  de:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <timer0_millis+0x2>
  e2:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <timer0_millis+0x3>
  e6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	b9 01       	movw	r22, r18
  ec:	a8 01       	movw	r20, r16
  ee:	4f 5f       	subi	r20, 0xFF	; 255
  f0:	5f 4f       	sbci	r21, 0xFF	; 255
  f2:	6f 4f       	sbci	r22, 0xFF	; 255
  f4:	7f 4f       	sbci	r23, 0xFF	; 255
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	89 0f       	add	r24, r25
  fa:	8d 37       	cpi	r24, 0x7D	; 125
  fc:	40 f0       	brcs	.+16     	; 0x10e <__vector_16+0x5a>
  fe:	86 e8       	ldi	r24, 0x86	; 134
 100:	89 0f       	add	r24, r25
 102:	b9 01       	movw	r22, r18
 104:	a8 01       	movw	r20, r16
 106:	4e 5f       	subi	r20, 0xFE	; 254
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	6f 4f       	sbci	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <timer0_millis>
 116:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <timer0_millis+0x1>
 11a:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <timer0_millis+0x2>
 11e:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <timer0_millis+0x3>
 122:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 126:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 12a:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 12e:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	a1 1d       	adc	r26, r1
 136:	b1 1d       	adc	r27, r1
 138:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 13c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 140:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 144:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	4f 91       	pop	r20
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <timer0_init>:
 16a:	f8 94       	cli
 16c:	14 bc       	out	0x24, r1	; 36
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	85 bd       	out	0x25, r24	; 37
 172:	ee e6       	ldi	r30, 0x6E	; 110
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	80 83       	st	Z, r24
 17c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timer0_overflow_count>
 180:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timer0_overflow_count+0x1>
 184:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <timer0_overflow_count+0x2>
 188:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timer0_overflow_count+0x3>
 18c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timer0_millis>
 190:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer0_millis+0x1>
 194:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer0_millis+0x2>
 198:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timer0_millis+0x3>
 19c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	78 94       	sei
 1a2:	08 95       	ret

000001a4 <__vector_18>:
volatile uint8_t rx_buffer[USART_RX_BUFFER_SIZE];
volatile uint8_t rx_head = 0;
volatile uint8_t rx_tail = 0;


ISR(USART_RX_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	uint8_t data = UDR0;
 1ba:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	uint8_t next_head = (rx_head + 1) % USART_RX_BUFFER_SIZE;
 1be:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rx_head>
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	8f 73       	andi	r24, 0x3F	; 63
 1c8:	90 78       	andi	r25, 0x80	; 128
 1ca:	99 23       	and	r25, r25
 1cc:	24 f4       	brge	.+8      	; 0x1d6 <__vector_18+0x32>
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	80 6c       	ori	r24, 0xC0	; 192
 1d2:	9f 6f       	ori	r25, 0xFF	; 255
 1d4:	01 96       	adiw	r24, 0x01	; 1

	if(next_head == rx_tail) {
 1d6:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <rx_tail>
 1da:	28 17       	cp	r18, r24
 1dc:	41 f0       	breq	.+16     	; 0x1ee <__vector_18+0x4a>
		return;
	}

	rx_buffer[rx_head] = data;
 1de:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <rx_head>
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	e3 5f       	subi	r30, 0xF3	; 243
 1e6:	fe 4f       	sbci	r31, 0xFE	; 254
 1e8:	30 83       	st	Z, r19
	rx_head = next_head;
 1ea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <rx_head>
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_19>:

ISR(USART_UDRE_vect){
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
	if(tx_head == tx_tail){
 216:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <tx_head>
 21a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tx_tail>
 21e:	98 13       	cpse	r25, r24
 220:	06 c0       	rjmp	.+12     	; 0x22e <__vector_19+0x2a>
		UCSR0B &= ~(1 << UDRIE0);
 222:	e1 ec       	ldi	r30, 0xC1	; 193
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	8f 7d       	andi	r24, 0xDF	; 223
 22a:	80 83       	st	Z, r24
		return;
 22c:	16 c0       	rjmp	.+44     	; 0x25a <__vector_19+0x56>
	}

	UDR0 = tx_buffer[tx_tail];
 22e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <tx_tail>
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	e3 5b       	subi	r30, 0xB3	; 179
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	80 81       	ld	r24, Z
 23a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	tx_tail = (tx_tail + 1) % USART_TX_BUFFER_SIZE;
 23e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tx_tail>
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	8f 73       	andi	r24, 0x3F	; 63
 248:	90 78       	andi	r25, 0x80	; 128
 24a:	99 23       	and	r25, r25
 24c:	24 f4       	brge	.+8      	; 0x256 <__vector_19+0x52>
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	80 6c       	ori	r24, 0xC0	; 192
 252:	9f 6f       	ori	r25, 0xFF	; 255
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tx_tail>
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <uart_init>:

void uart_init(uint32_t baud){
 26c:	9b 01       	movw	r18, r22
 26e:	ac 01       	movw	r20, r24
	UBRR0 = (F_CPU / 16 / baud) - 1;
 270:	60 e4       	ldi	r22, 0x40	; 64
 272:	72 e4       	ldi	r23, 0x42	; 66
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodsi4>
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	31 09       	sbc	r19, r1
 280:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 284:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 28e:	e1 ec       	ldi	r30, 0xC1	; 193
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	88 e1       	ldi	r24, 0x18	; 24
 294:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 296:	80 81       	ld	r24, Z
 298:	80 68       	ori	r24, 0x80	; 128
 29a:	80 83       	st	Z, r24
 29c:	08 95       	ret

0000029e <uart_tx>:
}

void uart_tx(uint8_t data){
	uint8_t next_head = (tx_head + 1) % USART_TX_BUFFER_SIZE;
 29e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <tx_head>
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	2f 5f       	subi	r18, 0xFF	; 255
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	2f 73       	andi	r18, 0x3F	; 63
 2aa:	30 78       	andi	r19, 0x80	; 128
 2ac:	33 23       	and	r19, r19
 2ae:	34 f4       	brge	.+12     	; 0x2bc <uart_tx+0x1e>
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	31 09       	sbc	r19, r1
 2b4:	20 6c       	ori	r18, 0xC0	; 192
 2b6:	3f 6f       	ori	r19, 0xFF	; 255
 2b8:	2f 5f       	subi	r18, 0xFF	; 255
 2ba:	3f 4f       	sbci	r19, 0xFF	; 255

	while (next_head == tx_tail){ }
 2bc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tx_tail>
 2c0:	29 17       	cp	r18, r25
 2c2:	e1 f3       	breq	.-8      	; 0x2bc <uart_tx+0x1e>

	tx_buffer[tx_head] = data;
 2c4:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <tx_head>
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	e3 5b       	subi	r30, 0xB3	; 179
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	80 83       	st	Z, r24
	tx_head = next_head;
 2d0:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <tx_head>
	UCSR0B |= (1 << UDRIE0);
 2d4:	e1 ec       	ldi	r30, 0xC1	; 193
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	80 62       	ori	r24, 0x20	; 32
 2dc:	80 83       	st	Z, r24
 2de:	08 95       	ret

000002e0 <uart_rx>:
}

uint8_t uart_rx(){
	while(rx_head == rx_tail){ }
 2e0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <rx_head>
 2e4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rx_tail>
 2e8:	98 17       	cp	r25, r24
 2ea:	d1 f3       	breq	.-12     	; 0x2e0 <uart_rx>
	uint8_t data = rx_buffer[rx_tail];
 2ec:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <rx_tail>
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	e3 5f       	subi	r30, 0xF3	; 243
 2f4:	fe 4f       	sbci	r31, 0xFE	; 254
 2f6:	80 81       	ld	r24, Z
	rx_tail = (rx_tail + 1) % USART_RX_BUFFER_SIZE;
 2f8:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <rx_tail>
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	2f 5f       	subi	r18, 0xFF	; 255
 300:	3f 4f       	sbci	r19, 0xFF	; 255
 302:	2f 73       	andi	r18, 0x3F	; 63
 304:	30 78       	andi	r19, 0x80	; 128
 306:	33 23       	and	r19, r19
 308:	34 f4       	brge	.+12     	; 0x316 <uart_rx+0x36>
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	31 09       	sbc	r19, r1
 30e:	20 6c       	ori	r18, 0xC0	; 192
 310:	3f 6f       	ori	r19, 0xFF	; 255
 312:	2f 5f       	subi	r18, 0xFF	; 255
 314:	3f 4f       	sbci	r19, 0xFF	; 255
 316:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <rx_tail>
	return data;
}
 31a:	08 95       	ret

0000031c <uart_is_available>:

uint8_t uart_is_available(){
	return (rx_head != rx_tail);
 31c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <rx_head>
 320:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rx_tail>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	29 13       	cpse	r18, r25
 328:	01 c0       	rjmp	.+2      	; 0x32c <uart_is_available+0x10>
 32a:	80 e0       	ldi	r24, 0x00	; 0
}
 32c:	08 95       	ret

0000032e <__udivmodsi4>:
 32e:	a1 e2       	ldi	r26, 0x21	; 33
 330:	1a 2e       	mov	r1, r26
 332:	aa 1b       	sub	r26, r26
 334:	bb 1b       	sub	r27, r27
 336:	fd 01       	movw	r30, r26
 338:	0d c0       	rjmp	.+26     	; 0x354 <__udivmodsi4_ep>

0000033a <__udivmodsi4_loop>:
 33a:	aa 1f       	adc	r26, r26
 33c:	bb 1f       	adc	r27, r27
 33e:	ee 1f       	adc	r30, r30
 340:	ff 1f       	adc	r31, r31
 342:	a2 17       	cp	r26, r18
 344:	b3 07       	cpc	r27, r19
 346:	e4 07       	cpc	r30, r20
 348:	f5 07       	cpc	r31, r21
 34a:	20 f0       	brcs	.+8      	; 0x354 <__udivmodsi4_ep>
 34c:	a2 1b       	sub	r26, r18
 34e:	b3 0b       	sbc	r27, r19
 350:	e4 0b       	sbc	r30, r20
 352:	f5 0b       	sbc	r31, r21

00000354 <__udivmodsi4_ep>:
 354:	66 1f       	adc	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	88 1f       	adc	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	1a 94       	dec	r1
 35e:	69 f7       	brne	.-38     	; 0x33a <__udivmodsi4_loop>
 360:	60 95       	com	r22
 362:	70 95       	com	r23
 364:	80 95       	com	r24
 366:	90 95       	com	r25
 368:	9b 01       	movw	r18, r22
 36a:	ac 01       	movw	r20, r24
 36c:	bd 01       	movw	r22, r26
 36e:	cf 01       	movw	r24, r30
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
